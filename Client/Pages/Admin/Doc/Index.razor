@page "/admin/doc/{CourseId:int}/{LessonId:int}"
@inject NavigationManager _navigation

<div>
    @if(Docs != null)
    {
        <table>
            <tr>
                <th>Название документа</th>
                <th>Детали</th>
                <th>Изменить</th>
                <th>Удалить</th>
            </tr>
            @foreach (var item in Docs)
            {
                <tr>
                    <td>@item.DocName</td>
                    <td><button @onclick="() => HandleDetailsClick(item.Id)">Детали</button></td>
                    <td><button @onclick="() => HandleEditClick(item.Id)">Изменить</button></td>
                    <td><button @onclick="() => HandleDeleteClick(item.Id)">Удалить</button></td>
                </tr>
            }
        </table>
    } else
    {
        <p>Здесть ничего нет</p>
    }

    <br />
    <button @onclick="() => HandleCreateClick()">Создать документ</button>
</div>

@code {
    [Parameter]
    public int CourseId { get; set; }

    [Parameter]
    public int LessonId { get; set; }

    [Inject]
    IDocRepository? _docRepository { get; set; }

    ICollection<DocDto>? Docs { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Docs = await _docRepository.GetAllDocs(CourseId, LessonId);
    }

    void HandleDetailsClick(int? id)
    {
        _navigation.NavigateTo($"/admin/doc/{CourseId}/{LessonId}/{id}");
    }

    void HandleEditClick(int? id)
    {
        _navigation.NavigateTo($"/admin/doc/edit/{CourseId}/{LessonId}/{id}");
    }

    void HandleDeleteClick(int? id)
    {
        _navigation.NavigateTo($"/admin/doc/delete/{CourseId}/{LessonId}/{id}");
    }

    void HandleCreateClick()
    {
        _navigation.NavigateTo($"/admin/doc/create/{CourseId}/{LessonId}");
    }
}
