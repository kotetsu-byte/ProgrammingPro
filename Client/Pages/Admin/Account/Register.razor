@page "/admin/register"
@inject NavigationManager _navigation

<div style="padding: 60px 120px;">
    <div style="margin: auto; width: 500px;">
        <EditForm Model="@Model" OnSubmit="() => Submit()">
            <div>
                <label>Имя</label>
                <input class="form-control" @bind-value="Model.FirstName" required />
            </div>
            <div>
                <label>Фамилия</label>
                <input class="form-control" @bind-value="Model.LastName" required />
            </div>
            <div>
                <label>Email</label>
                <input class="form-control" @bind-value="Model.Email" />
            </div>
            <div>
                <label>Username</label>
                <input class="form-control" @bind-value="Model.UserName" required />
            </div>
            <div>
                <label>Пароль</label>
                <input class="form-control" @bind-value="Model.Password" required />
            </div>
            <div>
                <label>Повтор пароля</label>
                <input class="form-control" @bind-value="Model.ConfirmPassword" required />
            </div>
            <button type="submit">Зарегистрироваться</button>
        </EditForm>
        <p class="text-danger">@WarningMessage</p>
    </div>
</div>

@code {
    [Inject]
    IUserRepository _userRepository { get; set; }

    UserDto Model { get; set; }

    protected override void OnInitialized() => Model ??= new();

    string WarningMessage { get; set; }

    async Task Submit()
    {
        var exists = (await _userRepository.UserExists(Model));
        if(exists == false)
        {
            Model.Role = "Admin";
            _userRepository.Create(Model);
            WarningMessage = "";
            _navigation.NavigateTo("/admin/login");
        }
        else
        {
            WarningMessage = "Пользователь с таким же логином уже существует";
        }
    }
}
